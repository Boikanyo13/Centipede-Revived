#ifndef COLLIDER_H
#define COLLIDER_H
#include "GameObject.h"
#include "Spaceship.h"
#include "MushroomField.h"
#include "UserInputs.h"
#include "Centipede.h"
#include "Score.h"
#include "Spider.h"
#include "Player.h"
#include "Scorpion.h"
#include "Collision.h"

#include <memory>
using std::shared_ptr;
using std::unique_ptr;
using std::make_unique;

/**
 * @class CollisionHandler
 * @date 08/10/2018
 * @file CollisionHandler.h
 * @brief This class handles collison of GameObjects
 */


class CollisionHandler
{
public:
    /**
     * @brief Constructor initializes the collision objects, the two classes share a composition relationship
     * @param score_ptr to calculate score
     */
    CollisionHandler(shared_ptr<Score> score_ptr):
    _score_ptr{score_ptr},
    _collision_ptr{std::make_unique<Collision>()}
    {}
    
    /**
     * @brief Handle LazerShot and Centipede Collisons
     * @param spaceship_ptr pointer to the Spaceship object
     * @param centipede_ptr pointer to the Centipede object
     * @param mushroom_ptr  pointer to the MushroomField object
     */
    void targetDestroyed(shared_ptr<Spaceship> spaceship_ptr, shared_ptr<Centipede> centipede_ptr, shared_ptr<MushroomField> mushroom_ptr);
    /**
     * @brief Handle Centipede and Spaceship Collison
     * @param centipede_ptr pointer to the Centipede object
     * @param spaceship_ptr pointer to the Spaceship object
     */
    void spaceshipHit(shared_ptr<Centipede> centipede_ptr,shared_ptr<Spaceship> spaceship_ptr);
     /**
      * @brief Handle Centipede and Mushroom collission
      * @param centipede_ptr pointer to the Centipede object
      * @param mushroom_ptr  pointer to the MushroomField object
      */
    void mushroomHit(shared_ptr<Centipede> centipede_ptr,shared_ptr<MushroomField> mushroom_ptr);
    /**
     * @brief Handle Mushroom Bullet Collision
     * @param spaceship_ptr pointer to the Spaceship object
     * @param mushroom_ptr  pointer to the MushroomField object
     */
    void mushroomShot(shared_ptr<Spaceship> spaceship_ptr, shared_ptr<MushroomField> mushroom_ptr);
     /**
      * @brief Handle Spaceship mushroom collision
      * @param spaceship_ptr pointer to the Spaceship object
      * @param mushroom_ptr  pointer to the MushroomField object
      * @param player_ptr pointer to the player object
      */
    void spaceshipCollision(shared_ptr<Spaceship> spaceship_ptr,shared_ptr<MushroomField> mushroom_ptr, shared_ptr<Player> player_ptr);
    /**
     * @brief Handle Collision between Spider and Spaceship
     * @param spider_ptr pointer to the spider object
     * @param spaceship_ptr pointer to the Spaceship object
     */
    void spaceshipHit(shared_ptr<Spider> spider_ptr, shared_ptr<Spaceship> spaceship_ptr);
    /**
     * @brief Handle Spider Mushroom Collision
     * @param gameObject_ptr pointer to GameObject
     * @param gameObjectContainer_ptr pointer to GameObjectContainer
     */
    void mushroomDestroyed(shared_ptr<GameObject> gameObject_ptr,shared_ptr<GameObjectContainer> gameObjectContainer_ptr);
    /**
     * @brief Handle spider Lazershot Collison
     * @param spaceship_ptr pointer to the Spaceship object shooting LazerShots
     * @param spider_ptr pointer to the spider object
     */
    void targetDestroyed(shared_ptr<Spaceship> spaceship_ptr, shared_ptr<Spider> spider_ptr);
    /**
     * @brief Handle Scorpion LazerShot Colliosn
     * @param spaceship_ptr pointer to the Spaceship object shooting LazerShots
     * @param scorpion_ptr pointer to Scorpion object
     */
    void targetDestroyed(shared_ptr<Spaceship> spaceship_ptr, shared_ptr<Scorpion> scorpion_ptr);
    /**
     * @brief Destroy CollisionHandler Object
     */
    ~CollisionHandler(){};
    
private:
    //To update score
    shared_ptr<Score> _score_ptr;
    //For collison detection
    unique_ptr<Collision> _collision_ptr;
};

#endif // COLLIDER_H
